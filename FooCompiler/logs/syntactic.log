
Unstacking...
NonTerminal symbol on top of stack: <PROGRAM>

Dequeuing...
Terminal symbol queued: startCode

(transition def) Test Transition --> Non Terminal: <PROGRAM>  |  Terminal: startCode
(transition def) Grammar id: 0

Grammar id: 0
Grammar: ['startCode', 'tk_abre_bloco', '<VARIABLE_LIST>', '<COMMAND_LIST>', 'tk_fecha_bloco', 'endCode']

Unstacking...
NonTerminal symbol on top of stack: startCode
Sentence recognized: startCode -> startCode

Unstacking...
NonTerminal symbol on top of stack: tk_abre_bloco
Sentence recognized: tk_abre_bloco -> tk_abre_bloco

Unstacking...
NonTerminal symbol on top of stack: <VARIABLE_LIST>

Dequeuing...
Terminal symbol queued: int

(transition def) Test Transition --> Non Terminal: <VARIABLE_LIST>  |  Terminal: int
(transition def) Grammar id: 1

Grammar id: 1
Grammar: ['<VARIABLE>', '<VARIABLE_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <VARIABLE>

Dequeuing...
Terminal symbol queued: int

(transition def) Test Transition --> Non Terminal: <VARIABLE>  |  Terminal: int
(transition def) Grammar id: 3

Grammar id: 3
Grammar: ['<TYPE_VARIABLE>', '<ATRIB>', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: <TYPE_VARIABLE>

Dequeuing...
Terminal symbol queued: int

(transition def) Test Transition --> Non Terminal: <TYPE_VARIABLE>  |  Terminal: int
(transition def) Grammar id: 5

Grammar id: 5
Grammar: ['int']

Unstacking...
NonTerminal symbol on top of stack: int
Sentence recognized: int -> int

Unstacking...
NonTerminal symbol on top of stack: <ATRIB>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <ATRIB>  |  Terminal: char
(transition def) Grammar id: 4

Grammar id: 4
Grammar: ['char', '<LOGIC>']

Unstacking...
NonTerminal symbol on top of stack: char
Sentence recognized: char -> char

Unstacking...
NonTerminal symbol on top of stack: <LOGIC>

Dequeuing...
Terminal symbol queued: tk_final

(transition def) Test Transition --> Non Terminal: <LOGIC>  |  Terminal: tk_final
(transition def) Grammar id: 32

Grammar id: 32
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <VARIABLE_LIST>

Dequeuing...
Terminal symbol queued: int

(transition def) Test Transition --> Non Terminal: <VARIABLE_LIST>  |  Terminal: int
(transition def) Grammar id: 1

Grammar id: 1
Grammar: ['<VARIABLE>', '<VARIABLE_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <VARIABLE>

Dequeuing...
Terminal symbol queued: int

(transition def) Test Transition --> Non Terminal: <VARIABLE>  |  Terminal: int
(transition def) Grammar id: 3

Grammar id: 3
Grammar: ['<TYPE_VARIABLE>', '<ATRIB>', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: <TYPE_VARIABLE>

Dequeuing...
Terminal symbol queued: int

(transition def) Test Transition --> Non Terminal: <TYPE_VARIABLE>  |  Terminal: int
(transition def) Grammar id: 5

Grammar id: 5
Grammar: ['int']

Unstacking...
NonTerminal symbol on top of stack: int
Sentence recognized: int -> int

Unstacking...
NonTerminal symbol on top of stack: <ATRIB>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <ATRIB>  |  Terminal: char
(transition def) Grammar id: 4

Grammar id: 4
Grammar: ['char', '<LOGIC>']

Unstacking...
NonTerminal symbol on top of stack: char
Sentence recognized: char -> char

Unstacking...
NonTerminal symbol on top of stack: <LOGIC>

Dequeuing...
Terminal symbol queued: tk_final

(transition def) Test Transition --> Non Terminal: <LOGIC>  |  Terminal: tk_final
(transition def) Grammar id: 32

Grammar id: 32
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <VARIABLE_LIST>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <VARIABLE_LIST>  |  Terminal: char
(transition def) Grammar id: 2

Grammar id: 2
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: char
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: char
(transition def) Grammar id: 14

Grammar id: 14
Grammar: ['<MATH_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <MATH_CMD>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <MATH_CMD>  |  Terminal: char
(transition def) Grammar id: 19

Grammar id: 19
Grammar: ['char', 'tk_atrib', '<ID_ARITHMETIC>', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: char
Sentence recognized: char -> char

Unstacking...
NonTerminal symbol on top of stack: tk_atrib
Sentence recognized: tk_atrib -> tk_atrib

Unstacking...
NonTerminal symbol on top of stack: <ID_ARITHMETIC>

Dequeuing...
Terminal symbol queued: integer

(transition def) Test Transition --> Non Terminal: <ID_ARITHMETIC>  |  Terminal: integer
(transition def) Grammar id: 33

Grammar id: 33
Grammar: ['integer', '<ARITHMETIC>']

Unstacking...
NonTerminal symbol on top of stack: integer
Sentence recognized: integer -> integer

Unstacking...
NonTerminal symbol on top of stack: <ARITHMETIC>

Dequeuing...
Terminal symbol queued: tk_final

(transition def) Test Transition --> Non Terminal: <ARITHMETIC>  |  Terminal: tk_final
(transition def) Grammar id: 44

Grammar id: 44
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: outputKey
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: outputKey
(transition def) Grammar id: 12

Grammar id: 12
Grammar: ['<OUTPUT_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <OUTPUT_CMD>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <OUTPUT_CMD>  |  Terminal: outputKey
(transition def) Grammar id: 17

Grammar id: 17
Grammar: ['outputKey', 'tk_abre_parenteses', '<SENTENCE>', 'tk_fecha_parenteses', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: outputKey
Sentence recognized: outputKey -> outputKey

Unstacking...
NonTerminal symbol on top of stack: tk_abre_parenteses
Sentence recognized: tk_abre_parenteses -> tk_abre_parenteses

Unstacking...
NonTerminal symbol on top of stack: <SENTENCE>

Dequeuing...
Terminal symbol queued: Str

(transition def) Test Transition --> Non Terminal: <SENTENCE>  |  Terminal: Str
(transition def) Grammar id: 8

Grammar id: 8
Grammar: ['Str']

Unstacking...
NonTerminal symbol on top of stack: Str
Sentence recognized: Str -> Str

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_parenteses
Sentence recognized: tk_fecha_parenteses -> tk_fecha_parenteses

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: inputKey

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: inputKey
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: inputKey

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: inputKey
(transition def) Grammar id: 11

Grammar id: 11
Grammar: ['<INPUT_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <INPUT_CMD>

Dequeuing...
Terminal symbol queued: inputKey

(transition def) Test Transition --> Non Terminal: <INPUT_CMD>  |  Terminal: inputKey
(transition def) Grammar id: 16

Grammar id: 16
Grammar: ['inputKey', 'tk_abre_parenteses', 'char', 'tk_fecha_parenteses', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: inputKey
Sentence recognized: inputKey -> inputKey

Unstacking...
NonTerminal symbol on top of stack: tk_abre_parenteses
Sentence recognized: tk_abre_parenteses -> tk_abre_parenteses

Unstacking...
NonTerminal symbol on top of stack: char
Sentence recognized: char -> char

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_parenteses
Sentence recognized: tk_fecha_parenteses -> tk_fecha_parenteses

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: if

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: if
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: if

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: if
(transition def) Grammar id: 13

Grammar id: 13
Grammar: ['<CONDITIONAL_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <CONDITIONAL_CMD>

Dequeuing...
Terminal symbol queued: if

(transition def) Test Transition --> Non Terminal: <CONDITIONAL_CMD>  |  Terminal: if
(transition def) Grammar id: 18

Grammar id: 18
Grammar: ['<IF>', '<ELSE>', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: <IF>

Dequeuing...
Terminal symbol queued: if

(transition def) Test Transition --> Non Terminal: <IF>  |  Terminal: if
(transition def) Grammar id: 22

Grammar id: 22
Grammar: ['if', 'tk_abre_parenteses', '<ID_LOGIC>', 'tk_fecha_parenteses', 'tk_abre_bloco', '<COMMAND_LIST>', 'tk_fecha_bloco']

Unstacking...
NonTerminal symbol on top of stack: if
Sentence recognized: if -> if

Unstacking...
NonTerminal symbol on top of stack: tk_abre_parenteses
Sentence recognized: tk_abre_parenteses -> tk_abre_parenteses

Unstacking...
NonTerminal symbol on top of stack: <ID_LOGIC>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <ID_LOGIC>  |  Terminal: char
(transition def) Grammar id: 27

Grammar id: 27
Grammar: ['char', '<LOGIC>']

Unstacking...
NonTerminal symbol on top of stack: char
Sentence recognized: char -> char

Unstacking...
NonTerminal symbol on top of stack: <LOGIC>

Dequeuing...
Terminal symbol queued: tk_igual

(transition def) Test Transition --> Non Terminal: <LOGIC>  |  Terminal: tk_igual
(transition def) Grammar id: 31

Grammar id: 31
Grammar: ['tk_igual', '<ID_LOGIC>']

Unstacking...
NonTerminal symbol on top of stack: tk_igual
Sentence recognized: tk_igual -> tk_igual

Unstacking...
NonTerminal symbol on top of stack: <ID_LOGIC>

Dequeuing...
Terminal symbol queued: integer

(transition def) Test Transition --> Non Terminal: <ID_LOGIC>  |  Terminal: integer
(transition def) Grammar id: 28

Grammar id: 28
Grammar: ['integer', '<LOGIC>']

Unstacking...
NonTerminal symbol on top of stack: integer
Sentence recognized: integer -> integer

Unstacking...
NonTerminal symbol on top of stack: <LOGIC>

Dequeuing...
Terminal symbol queued: tk_fecha_parenteses

(transition def) Test Transition --> Non Terminal: <LOGIC>  |  Terminal: tk_fecha_parenteses
(transition def) Grammar id: 32

Grammar id: 32
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_parenteses
Sentence recognized: tk_fecha_parenteses -> tk_fecha_parenteses

Unstacking...
NonTerminal symbol on top of stack: tk_abre_bloco
Sentence recognized: tk_abre_bloco -> tk_abre_bloco

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: outputKey
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: outputKey
(transition def) Grammar id: 12

Grammar id: 12
Grammar: ['<OUTPUT_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <OUTPUT_CMD>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <OUTPUT_CMD>  |  Terminal: outputKey
(transition def) Grammar id: 17

Grammar id: 17
Grammar: ['outputKey', 'tk_abre_parenteses', '<SENTENCE>', 'tk_fecha_parenteses', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: outputKey
Sentence recognized: outputKey -> outputKey

Unstacking...
NonTerminal symbol on top of stack: tk_abre_parenteses
Sentence recognized: tk_abre_parenteses -> tk_abre_parenteses

Unstacking...
NonTerminal symbol on top of stack: <SENTENCE>

Dequeuing...
Terminal symbol queued: Str

(transition def) Test Transition --> Non Terminal: <SENTENCE>  |  Terminal: Str
(transition def) Grammar id: 8

Grammar id: 8
Grammar: ['Str']

Unstacking...
NonTerminal symbol on top of stack: Str
Sentence recognized: Str -> Str

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_parenteses
Sentence recognized: tk_fecha_parenteses -> tk_fecha_parenteses

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: tk_fecha_bloco

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: tk_fecha_bloco
(transition def) Grammar id: 10

Grammar id: 10
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_bloco
Sentence recognized: tk_fecha_bloco -> tk_fecha_bloco

Unstacking...
NonTerminal symbol on top of stack: <ELSE>

Dequeuing...
Terminal symbol queued: else

(transition def) Test Transition --> Non Terminal: <ELSE>  |  Terminal: else
(transition def) Grammar id: 23

Grammar id: 23
Grammar: ['else', 'tk_abre_bloco', '<COMMAND_LIST>', 'tk_fecha_bloco']

Unstacking...
NonTerminal symbol on top of stack: else
Sentence recognized: else -> else

Unstacking...
NonTerminal symbol on top of stack: tk_abre_bloco
Sentence recognized: tk_abre_bloco -> tk_abre_bloco

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: outputKey
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: outputKey
(transition def) Grammar id: 12

Grammar id: 12
Grammar: ['<OUTPUT_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <OUTPUT_CMD>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <OUTPUT_CMD>  |  Terminal: outputKey
(transition def) Grammar id: 17

Grammar id: 17
Grammar: ['outputKey', 'tk_abre_parenteses', '<SENTENCE>', 'tk_fecha_parenteses', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: outputKey
Sentence recognized: outputKey -> outputKey

Unstacking...
NonTerminal symbol on top of stack: tk_abre_parenteses
Sentence recognized: tk_abre_parenteses -> tk_abre_parenteses

Unstacking...
NonTerminal symbol on top of stack: <SENTENCE>

Dequeuing...
Terminal symbol queued: Str

(transition def) Test Transition --> Non Terminal: <SENTENCE>  |  Terminal: Str
(transition def) Grammar id: 8

Grammar id: 8
Grammar: ['Str']

Unstacking...
NonTerminal symbol on top of stack: Str
Sentence recognized: Str -> Str

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_parenteses
Sentence recognized: tk_fecha_parenteses -> tk_fecha_parenteses

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: if

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: if
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: if

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: if
(transition def) Grammar id: 13

Grammar id: 13
Grammar: ['<CONDITIONAL_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <CONDITIONAL_CMD>

Dequeuing...
Terminal symbol queued: if

(transition def) Test Transition --> Non Terminal: <CONDITIONAL_CMD>  |  Terminal: if
(transition def) Grammar id: 18

Grammar id: 18
Grammar: ['<IF>', '<ELSE>', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: <IF>

Dequeuing...
Terminal symbol queued: if

(transition def) Test Transition --> Non Terminal: <IF>  |  Terminal: if
(transition def) Grammar id: 22

Grammar id: 22
Grammar: ['if', 'tk_abre_parenteses', '<ID_LOGIC>', 'tk_fecha_parenteses', 'tk_abre_bloco', '<COMMAND_LIST>', 'tk_fecha_bloco']

Unstacking...
NonTerminal symbol on top of stack: if
Sentence recognized: if -> if

Unstacking...
NonTerminal symbol on top of stack: tk_abre_parenteses
Sentence recognized: tk_abre_parenteses -> tk_abre_parenteses

Unstacking...
NonTerminal symbol on top of stack: <ID_LOGIC>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <ID_LOGIC>  |  Terminal: char
(transition def) Grammar id: 27

Grammar id: 27
Grammar: ['char', '<LOGIC>']

Unstacking...
NonTerminal symbol on top of stack: char
Sentence recognized: char -> char

Unstacking...
NonTerminal symbol on top of stack: <LOGIC>

Dequeuing...
Terminal symbol queued: tk_maior_que

(transition def) Test Transition --> Non Terminal: <LOGIC>  |  Terminal: tk_maior_que
(transition def) Grammar id: 29

Grammar id: 29
Grammar: ['tk_maior_que', '<ID_LOGIC>']

Unstacking...
NonTerminal symbol on top of stack: tk_maior_que
Sentence recognized: tk_maior_que -> tk_maior_que

Unstacking...
NonTerminal symbol on top of stack: <ID_LOGIC>

Dequeuing...
Terminal symbol queued: integer

(transition def) Test Transition --> Non Terminal: <ID_LOGIC>  |  Terminal: integer
(transition def) Grammar id: 28

Grammar id: 28
Grammar: ['integer', '<LOGIC>']

Unstacking...
NonTerminal symbol on top of stack: integer
Sentence recognized: integer -> integer

Unstacking...
NonTerminal symbol on top of stack: <LOGIC>

Dequeuing...
Terminal symbol queued: tk_fecha_parenteses

(transition def) Test Transition --> Non Terminal: <LOGIC>  |  Terminal: tk_fecha_parenteses
(transition def) Grammar id: 32

Grammar id: 32
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_parenteses
Sentence recognized: tk_fecha_parenteses -> tk_fecha_parenteses

Unstacking...
NonTerminal symbol on top of stack: tk_abre_bloco
Sentence recognized: tk_abre_bloco -> tk_abre_bloco

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: outputKey
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: outputKey
(transition def) Grammar id: 12

Grammar id: 12
Grammar: ['<OUTPUT_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <OUTPUT_CMD>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <OUTPUT_CMD>  |  Terminal: outputKey
(transition def) Grammar id: 17

Grammar id: 17
Grammar: ['outputKey', 'tk_abre_parenteses', '<SENTENCE>', 'tk_fecha_parenteses', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: outputKey
Sentence recognized: outputKey -> outputKey

Unstacking...
NonTerminal symbol on top of stack: tk_abre_parenteses
Sentence recognized: tk_abre_parenteses -> tk_abre_parenteses

Unstacking...
NonTerminal symbol on top of stack: <SENTENCE>

Dequeuing...
Terminal symbol queued: Str

(transition def) Test Transition --> Non Terminal: <SENTENCE>  |  Terminal: Str
(transition def) Grammar id: 8

Grammar id: 8
Grammar: ['Str']

Unstacking...
NonTerminal symbol on top of stack: Str
Sentence recognized: Str -> Str

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_parenteses
Sentence recognized: tk_fecha_parenteses -> tk_fecha_parenteses

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: tk_fecha_bloco

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: tk_fecha_bloco
(transition def) Grammar id: 10

Grammar id: 10
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_bloco
Sentence recognized: tk_fecha_bloco -> tk_fecha_bloco

Unstacking...
NonTerminal symbol on top of stack: <ELSE>

Dequeuing...
Terminal symbol queued: else

(transition def) Test Transition --> Non Terminal: <ELSE>  |  Terminal: else
(transition def) Grammar id: 23

Grammar id: 23
Grammar: ['else', 'tk_abre_bloco', '<COMMAND_LIST>', 'tk_fecha_bloco']

Unstacking...
NonTerminal symbol on top of stack: else
Sentence recognized: else -> else

Unstacking...
NonTerminal symbol on top of stack: tk_abre_bloco
Sentence recognized: tk_abre_bloco -> tk_abre_bloco

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: if

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: if
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: if

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: if
(transition def) Grammar id: 13

Grammar id: 13
Grammar: ['<CONDITIONAL_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <CONDITIONAL_CMD>

Dequeuing...
Terminal symbol queued: if

(transition def) Test Transition --> Non Terminal: <CONDITIONAL_CMD>  |  Terminal: if
(transition def) Grammar id: 18

Grammar id: 18
Grammar: ['<IF>', '<ELSE>', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: <IF>

Dequeuing...
Terminal symbol queued: if

(transition def) Test Transition --> Non Terminal: <IF>  |  Terminal: if
(transition def) Grammar id: 22

Grammar id: 22
Grammar: ['if', 'tk_abre_parenteses', '<ID_LOGIC>', 'tk_fecha_parenteses', 'tk_abre_bloco', '<COMMAND_LIST>', 'tk_fecha_bloco']

Unstacking...
NonTerminal symbol on top of stack: if
Sentence recognized: if -> if

Unstacking...
NonTerminal symbol on top of stack: tk_abre_parenteses
Sentence recognized: tk_abre_parenteses -> tk_abre_parenteses

Unstacking...
NonTerminal symbol on top of stack: <ID_LOGIC>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <ID_LOGIC>  |  Terminal: char
(transition def) Grammar id: 27

Grammar id: 27
Grammar: ['char', '<LOGIC>']

Unstacking...
NonTerminal symbol on top of stack: char
Sentence recognized: char -> char

Unstacking...
NonTerminal symbol on top of stack: <LOGIC>

Dequeuing...
Terminal symbol queued: tk_menor_que

(transition def) Test Transition --> Non Terminal: <LOGIC>  |  Terminal: tk_menor_que
(transition def) Grammar id: 30

Grammar id: 30
Grammar: ['tk_menor_que', '<ID_LOGIC>']

Unstacking...
NonTerminal symbol on top of stack: tk_menor_que
Sentence recognized: tk_menor_que -> tk_menor_que

Unstacking...
NonTerminal symbol on top of stack: <ID_LOGIC>

Dequeuing...
Terminal symbol queued: integer

(transition def) Test Transition --> Non Terminal: <ID_LOGIC>  |  Terminal: integer
(transition def) Grammar id: 28

Grammar id: 28
Grammar: ['integer', '<LOGIC>']

Unstacking...
NonTerminal symbol on top of stack: integer
Sentence recognized: integer -> integer

Unstacking...
NonTerminal symbol on top of stack: <LOGIC>

Dequeuing...
Terminal symbol queued: tk_fecha_parenteses

(transition def) Test Transition --> Non Terminal: <LOGIC>  |  Terminal: tk_fecha_parenteses
(transition def) Grammar id: 32

Grammar id: 32
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_parenteses
Sentence recognized: tk_fecha_parenteses -> tk_fecha_parenteses

Unstacking...
NonTerminal symbol on top of stack: tk_abre_bloco
Sentence recognized: tk_abre_bloco -> tk_abre_bloco

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: outputKey
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: outputKey
(transition def) Grammar id: 12

Grammar id: 12
Grammar: ['<OUTPUT_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <OUTPUT_CMD>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <OUTPUT_CMD>  |  Terminal: outputKey
(transition def) Grammar id: 17

Grammar id: 17
Grammar: ['outputKey', 'tk_abre_parenteses', '<SENTENCE>', 'tk_fecha_parenteses', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: outputKey
Sentence recognized: outputKey -> outputKey

Unstacking...
NonTerminal symbol on top of stack: tk_abre_parenteses
Sentence recognized: tk_abre_parenteses -> tk_abre_parenteses

Unstacking...
NonTerminal symbol on top of stack: <SENTENCE>

Dequeuing...
Terminal symbol queued: Str

(transition def) Test Transition --> Non Terminal: <SENTENCE>  |  Terminal: Str
(transition def) Grammar id: 8

Grammar id: 8
Grammar: ['Str']

Unstacking...
NonTerminal symbol on top of stack: Str
Sentence recognized: Str -> Str

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_parenteses
Sentence recognized: tk_fecha_parenteses -> tk_fecha_parenteses

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: tk_fecha_bloco

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: tk_fecha_bloco
(transition def) Grammar id: 10

Grammar id: 10
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_bloco
Sentence recognized: tk_fecha_bloco -> tk_fecha_bloco

Unstacking...
NonTerminal symbol on top of stack: <ELSE>

Dequeuing...
Terminal symbol queued: tk_final

(transition def) Test Transition --> Non Terminal: <ELSE>  |  Terminal: tk_final
(transition def) Grammar id: 24

Grammar id: 24
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: tk_fecha_bloco

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: tk_fecha_bloco
(transition def) Grammar id: 10

Grammar id: 10
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_bloco
Sentence recognized: tk_fecha_bloco -> tk_fecha_bloco

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: tk_fecha_bloco

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: tk_fecha_bloco
(transition def) Grammar id: 10

Grammar id: 10
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_bloco
Sentence recognized: tk_fecha_bloco -> tk_fecha_bloco

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: outputKey
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: outputKey
(transition def) Grammar id: 12

Grammar id: 12
Grammar: ['<OUTPUT_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <OUTPUT_CMD>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <OUTPUT_CMD>  |  Terminal: outputKey
(transition def) Grammar id: 17

Grammar id: 17
Grammar: ['outputKey', 'tk_abre_parenteses', '<SENTENCE>', 'tk_fecha_parenteses', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: outputKey
Sentence recognized: outputKey -> outputKey

Unstacking...
NonTerminal symbol on top of stack: tk_abre_parenteses
Sentence recognized: tk_abre_parenteses -> tk_abre_parenteses

Unstacking...
NonTerminal symbol on top of stack: <SENTENCE>

Dequeuing...
Terminal symbol queued: Str

(transition def) Test Transition --> Non Terminal: <SENTENCE>  |  Terminal: Str
(transition def) Grammar id: 8

Grammar id: 8
Grammar: ['Str']

Unstacking...
NonTerminal symbol on top of stack: Str
Sentence recognized: Str -> Str

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_parenteses
Sentence recognized: tk_fecha_parenteses -> tk_fecha_parenteses

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: while

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: while
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: while

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: while
(transition def) Grammar id: 15

Grammar id: 15
Grammar: ['<LOOP_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <LOOP_CMD>

Dequeuing...
Terminal symbol queued: while

(transition def) Test Transition --> Non Terminal: <LOOP_CMD>  |  Terminal: while
(transition def) Grammar id: 21

Grammar id: 21
Grammar: ['<WHILE_LOOP>']

Unstacking...
NonTerminal symbol on top of stack: <WHILE_LOOP>

Dequeuing...
Terminal symbol queued: while

(transition def) Test Transition --> Non Terminal: <WHILE_LOOP>  |  Terminal: while
(transition def) Grammar id: 26

Grammar id: 26
Grammar: ['while', 'tk_abre_parenteses', '<ID_LOGIC>', 'tk_fecha_parenteses', 'tk_abre_bloco', '<COMMAND_LIST>', 'tk_fecha_bloco', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: while
Sentence recognized: while -> while

Unstacking...
NonTerminal symbol on top of stack: tk_abre_parenteses
Sentence recognized: tk_abre_parenteses -> tk_abre_parenteses

Unstacking...
NonTerminal symbol on top of stack: <ID_LOGIC>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <ID_LOGIC>  |  Terminal: char
(transition def) Grammar id: 27

Grammar id: 27
Grammar: ['char', '<LOGIC>']

Unstacking...
NonTerminal symbol on top of stack: char
Sentence recognized: char -> char

Unstacking...
NonTerminal symbol on top of stack: <LOGIC>

Dequeuing...
Terminal symbol queued: tk_maior_que

(transition def) Test Transition --> Non Terminal: <LOGIC>  |  Terminal: tk_maior_que
(transition def) Grammar id: 29

Grammar id: 29
Grammar: ['tk_maior_que', '<ID_LOGIC>']

Unstacking...
NonTerminal symbol on top of stack: tk_maior_que
Sentence recognized: tk_maior_que -> tk_maior_que

Unstacking...
NonTerminal symbol on top of stack: <ID_LOGIC>

Dequeuing...
Terminal symbol queued: integer

(transition def) Test Transition --> Non Terminal: <ID_LOGIC>  |  Terminal: integer
(transition def) Grammar id: 28

Grammar id: 28
Grammar: ['integer', '<LOGIC>']

Unstacking...
NonTerminal symbol on top of stack: integer
Sentence recognized: integer -> integer

Unstacking...
NonTerminal symbol on top of stack: <LOGIC>

Dequeuing...
Terminal symbol queued: tk_fecha_parenteses

(transition def) Test Transition --> Non Terminal: <LOGIC>  |  Terminal: tk_fecha_parenteses
(transition def) Grammar id: 32

Grammar id: 32
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_parenteses
Sentence recognized: tk_fecha_parenteses -> tk_fecha_parenteses

Unstacking...
NonTerminal symbol on top of stack: tk_abre_bloco
Sentence recognized: tk_abre_bloco -> tk_abre_bloco

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: char
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: char
(transition def) Grammar id: 14

Grammar id: 14
Grammar: ['<MATH_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <MATH_CMD>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <MATH_CMD>  |  Terminal: char
(transition def) Grammar id: 19

Grammar id: 19
Grammar: ['char', 'tk_atrib', '<ID_ARITHMETIC>', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: char
Sentence recognized: char -> char

Unstacking...
NonTerminal symbol on top of stack: tk_atrib
Sentence recognized: tk_atrib -> tk_atrib

Unstacking...
NonTerminal symbol on top of stack: <ID_ARITHMETIC>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <ID_ARITHMETIC>  |  Terminal: char
(transition def) Grammar id: 34

Grammar id: 34
Grammar: ['char', '<ARITHMETIC>']

Unstacking...
NonTerminal symbol on top of stack: char
Sentence recognized: char -> char

Unstacking...
NonTerminal symbol on top of stack: <ARITHMETIC>

Dequeuing...
Terminal symbol queued: tk_multiplicacao

(transition def) Test Transition --> Non Terminal: <ARITHMETIC>  |  Terminal: tk_multiplicacao
(transition def) Grammar id: 41

Grammar id: 41
Grammar: ['tk_multiplicacao', '<ID_ARITHMETIC>']

Unstacking...
NonTerminal symbol on top of stack: tk_multiplicacao
Sentence recognized: tk_multiplicacao -> tk_multiplicacao

Unstacking...
NonTerminal symbol on top of stack: <ID_ARITHMETIC>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <ID_ARITHMETIC>  |  Terminal: char
(transition def) Grammar id: 34

Grammar id: 34
Grammar: ['char', '<ARITHMETIC>']

Unstacking...
NonTerminal symbol on top of stack: char
Sentence recognized: char -> char

Unstacking...
NonTerminal symbol on top of stack: <ARITHMETIC>

Dequeuing...
Terminal symbol queued: tk_final

(transition def) Test Transition --> Non Terminal: <ARITHMETIC>  |  Terminal: tk_final
(transition def) Grammar id: 44

Grammar id: 44
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: char
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: char
(transition def) Grammar id: 14

Grammar id: 14
Grammar: ['<MATH_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <MATH_CMD>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <MATH_CMD>  |  Terminal: char
(transition def) Grammar id: 19

Grammar id: 19
Grammar: ['char', 'tk_atrib', '<ID_ARITHMETIC>', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: char
Sentence recognized: char -> char

Unstacking...
NonTerminal symbol on top of stack: tk_atrib
Sentence recognized: tk_atrib -> tk_atrib

Unstacking...
NonTerminal symbol on top of stack: <ID_ARITHMETIC>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <ID_ARITHMETIC>  |  Terminal: char
(transition def) Grammar id: 34

Grammar id: 34
Grammar: ['char', '<ARITHMETIC>']

Unstacking...
NonTerminal symbol on top of stack: char
Sentence recognized: char -> char

Unstacking...
NonTerminal symbol on top of stack: <ARITHMETIC>

Dequeuing...
Terminal symbol queued: tk_subtracao

(transition def) Test Transition --> Non Terminal: <ARITHMETIC>  |  Terminal: tk_subtracao
(transition def) Grammar id: 40

Grammar id: 40
Grammar: ['tk_subtracao', '<ID_ARITHMETIC>']

Unstacking...
NonTerminal symbol on top of stack: tk_subtracao
Sentence recognized: tk_subtracao -> tk_subtracao

Unstacking...
NonTerminal symbol on top of stack: <ID_ARITHMETIC>

Dequeuing...
Terminal symbol queued: integer

(transition def) Test Transition --> Non Terminal: <ID_ARITHMETIC>  |  Terminal: integer
(transition def) Grammar id: 33

Grammar id: 33
Grammar: ['integer', '<ARITHMETIC>']

Unstacking...
NonTerminal symbol on top of stack: integer
Sentence recognized: integer -> integer

Unstacking...
NonTerminal symbol on top of stack: <ARITHMETIC>

Dequeuing...
Terminal symbol queued: tk_final

(transition def) Test Transition --> Non Terminal: <ARITHMETIC>  |  Terminal: tk_final
(transition def) Grammar id: 44

Grammar id: 44
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: tk_fecha_bloco

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: tk_fecha_bloco
(transition def) Grammar id: 10

Grammar id: 10
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_bloco
Sentence recognized: tk_fecha_bloco -> tk_fecha_bloco

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: outputKey
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: outputKey
(transition def) Grammar id: 12

Grammar id: 12
Grammar: ['<OUTPUT_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <OUTPUT_CMD>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <OUTPUT_CMD>  |  Terminal: outputKey
(transition def) Grammar id: 17

Grammar id: 17
Grammar: ['outputKey', 'tk_abre_parenteses', '<SENTENCE>', 'tk_fecha_parenteses', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: outputKey
Sentence recognized: outputKey -> outputKey

Unstacking...
NonTerminal symbol on top of stack: tk_abre_parenteses
Sentence recognized: tk_abre_parenteses -> tk_abre_parenteses

Unstacking...
NonTerminal symbol on top of stack: <SENTENCE>

Dequeuing...
Terminal symbol queued: Str

(transition def) Test Transition --> Non Terminal: <SENTENCE>  |  Terminal: Str
(transition def) Grammar id: 8

Grammar id: 8
Grammar: ['Str']

Unstacking...
NonTerminal symbol on top of stack: Str
Sentence recognized: Str -> Str

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_parenteses
Sentence recognized: tk_fecha_parenteses -> tk_fecha_parenteses

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: outputKey
(transition def) Grammar id: 9

Grammar id: 9
Grammar: ['<COMMAND>', '<COMMAND_LIST>']

Unstacking...
NonTerminal symbol on top of stack: <COMMAND>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <COMMAND>  |  Terminal: outputKey
(transition def) Grammar id: 12

Grammar id: 12
Grammar: ['<OUTPUT_CMD>']

Unstacking...
NonTerminal symbol on top of stack: <OUTPUT_CMD>

Dequeuing...
Terminal symbol queued: outputKey

(transition def) Test Transition --> Non Terminal: <OUTPUT_CMD>  |  Terminal: outputKey
(transition def) Grammar id: 17

Grammar id: 17
Grammar: ['outputKey', 'tk_abre_parenteses', '<SENTENCE>', 'tk_fecha_parenteses', 'tk_final']

Unstacking...
NonTerminal symbol on top of stack: outputKey
Sentence recognized: outputKey -> outputKey

Unstacking...
NonTerminal symbol on top of stack: tk_abre_parenteses
Sentence recognized: tk_abre_parenteses -> tk_abre_parenteses

Unstacking...
NonTerminal symbol on top of stack: <SENTENCE>

Dequeuing...
Terminal symbol queued: char

(transition def) Test Transition --> Non Terminal: <SENTENCE>  |  Terminal: char
(transition def) Grammar id: 6

Grammar id: 6
Grammar: ['char']

Unstacking...
NonTerminal symbol on top of stack: char
Sentence recognized: char -> char

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_parenteses
Sentence recognized: tk_fecha_parenteses -> tk_fecha_parenteses

Unstacking...
NonTerminal symbol on top of stack: tk_final
Sentence recognized: tk_final -> tk_final

Unstacking...
NonTerminal symbol on top of stack: <COMMAND_LIST>

Dequeuing...
Terminal symbol queued: tk_fecha_bloco

(transition def) Test Transition --> Non Terminal: <COMMAND_LIST>  |  Terminal: tk_fecha_bloco
(transition def) Grammar id: 10

Grammar id: 10
Grammar: ['î']

Unstacking...
NonTerminal symbol on top of stack: tk_fecha_bloco
Sentence recognized: tk_fecha_bloco -> tk_fecha_bloco

Unstacking...
NonTerminal symbol on top of stack: endCode
Sentence recognized: endCode -> endCode

Unstacking...
NonTerminal symbol on top of stack: $
Sentence recognized: $ -> $
